service mesh -- istio / linkerd  ===>https://jimmysong.io/kubernetes-handbook/usecases/service-mesh-fundamental.html
		 		istio:https://jimmysong.io/kubernetes-handbook/usecases/istio.html

		 		可以将它比作是应用程序或者说微服务间的 TCP/IP，负责服务之间的网络调用、限流、熔断和监控。对于编写应用程序来说一般无须关心 TCP/IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用 Service Mesh 也就无须关系服务之间的那些原来是通过应用程序或者其他框架实现的事情，比如 Spring Cloud、OSS，现在只要交给 Service Mesh 就可以了。

		 		什么是 service mesh？
					Service mesh 有如下几个特点：

					应用程序间通讯的中间层
					轻量级网络代理
					应用程序无感知
					解耦应用程序的重试/超时、监控、追踪和服务发现
			12.在 Cloud Native 架构下，容器的使用给予了异构应用程序的更多可行性，kubernetes 增强的应用的横向扩容能力，用户可以快速的编排出复杂环境、复杂依赖关系的应用程序，同时开发者又无须过分关心应用程序的监控、扩展性、服务发现和分布式追踪这些繁琐的事情而专注于程序开发，赋予开发者更多的创造性。===> serive mesh 分布式限流.重试...

			13.service mesh分为:
						控制平面

						控制平面的特点：

						不直接解析数据包
						与控制平面中的代理通信，下发策略和配置
						负责网络行为的可视化
						通常提供API或者命令行工具可用于配置版本化管理，便于持续集成和部署
						数据平面

						数据平面的特点：

						通常是按照无状态目标设计的，但实际上为了提高流量转发性能，需要缓存一些数据，因此无状态也是有争议的
						直接处理入站和出站数据包，转发、路由、健康检查、负载均衡、认证、鉴权、产生监控数据等
						对应用来说透明，即可以做到无感知部署

					 	为什么有了如Kubernetes这样的容器编排我们还需要Service Mesh呢，下表是对容器编排调度器的核心功能和缺少的服务级别能力对比。

									核心能力				缺少的服务级别能力

									集群管理					熔断
									调度						L7细粒度的流量控制
									编排器和主机维护			混沌测试
									服务发现					金丝雀部署
									网络和负载均衡			超时、重试、 budget和deadline
									有状态服务				按请求路由
									多租户、多region			策略
									简单的应用监控检查和性能监控	传输层安全（加密）
									应用部署					身份和访问控制
									配置和秘钥管理			配额管理
									/						协议转换（REST、gRPC）

						Service Mesh还有一些遗留的问题没有解决或者说比较薄弱的功能：

							分布式应用的调试，可以参考squash
							服务拓扑和状态图，可以参考kiali和vistio
							多租户和多集群的支持
							白盒监控、支持APM
							加强负载测试工具slow_cooker、fortio、lago等
							更高级的fallback路径支持
							可拔插的证书授权组建，支持外部的CA
							下面是采纳Service Mesh之前需要考虑的因素。

							因素	可以考虑使用Service Mesh        				强烈建议使用Service Mesh
							服务通信	基本无需跨服务间的通讯						十分要求服务间通讯
							可观察性	只关注边缘的指标即可							内部服务和边缘指标都要考虑以更好的了解服务的行为
							客户关注	主要关注外部API的体验，						内外用户是隔离的	内部外部用户没有区别体验一致
							API的界限											API主要是作为客户端为客户提供，内部的API与外部是分离的	API即产品，API就是你的产品能力
							安全模型	通过边缘、防火墙可信内部网络的方式控制安全	    所有的服务都需要认证和鉴权、服务间要加密、zero-trust安全观念	

		 
